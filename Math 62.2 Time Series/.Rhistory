wind <- group_by(airQ, WindGroup)
summarize(wind, meanTemp = mean(Temp), maxTemp = max(Temp))
month <- group_by(airQ, Month)
summarize(month, meanTemp = mean(Temp), maxTemp = max(Temp), minTemp = min(Temp))
# join functions
products <- data.frame("product_id" = c(1,2,3,4,5),
"product_name" = c("Adobo", "Bangus", "Tilapia", "Rice", "Spam"))
orders <- data.frame("order_id" = c(1,2,3,4,5,6,7),
"product_id" = c(2,5,4,3,1,1,3),
"number" = c(2,2,1,4,3,2,1))
inner_join(products,orders, by = c("product_id" = "product_id") )
A <- matrix(1:36, 6, 6)
A[C(1,4), C(5,3)]
A[c(1,4), c(5,3)]
A[3,]
A[3, drop = FALSE]
A[3,, drop = FALSE]
full_join(products, orders)
orders <- data.frame("order_id" = c(1,2,3,4,5,6,7),
"product_id" = c(2,5,4,3,1,6,3),
"number" = c(2,2,1,4,3,2,1))
full_join(products, orders)
inner_join(products,orders, by = c("product_id" = "product_id"))
# Removing NA values
class <- c("Dani", "Hannah", "Jamie", NA, "Owen")
missing <- is.na(class)
class[!missing]
df <- data.frame(class, missing)
# remove rows or columns with NA
kumpleto <- complete.cases(df)
df_1 <-df[kumpleto,]
df
df_1
products %>% inner_join(orders, by = c("product_id" = "product_id"))
inner_join(products,orders, by = c("product_id" = "product_id"))
products %>% left_join(orders, by = c("product_id" = "product_id"))
products %>% right_join(orders, by = c("product_id" = "product_id"))
# join functions
products <- data.frame("product_id" = c(1,2,3,4,5, 8),
"product_name" = c("Adobo", "Bangus", "Tilapia", "Rice", "Spam"))
# join functions
products <- data.frame("product_id" = c(1,2,3,4,5, 8),
"product_name" = c("Adobo", "Bangus", "Tilapia", "Rice", "Spam", "Hotdog"))
orders <- data.frame("order_id" = c(1,2,3,4,5,6,7),
"product_id" = c(2,5,4,3,1,6,3),
"number" = c(2,2,1,4,3,2,1))
inner_join(products,orders, by = c("product_id" = "product_id"))
products %>% inner_join(orders, by = c("product_id" = "product_id"))
products %>% left_join(orders, by = c("product_id" = "product_id"))
products %>% right_join(orders, by = c("product_id" = "product_id"))
products %>% full_join(orders, by = c("product_id" = "product_id"))
library(dplyr)
airQ <- airquality
airQ
dim(airQ)
names(airQ)
# 1. select function
# select function is used to get columns of a dataframe
select(airQ, Ozone)
select(airQ, c(Month, Day, Ozone))
# all columns except Temp column
select(airQ, -c(Temp))
# 2. filter function
filter(airQ, Wind >10)
filter(airQ, Ozone > 20 & Solar.R > 300)
# 3. arrange function
# used to reorder rows of a dataframe according to a column
head(arrange(airQ, Ozone))
tail(arrange(airQ, Day))
# by default it arranges the rows ascending
arrange(airQ, desc(Wind))
# 4. rename function
rename(airQ, Solar.Radiation = Solar.R)
# 5. mutate function
# create new columns based on other columns
mean(airQ$Temp)
mutate(airQ, TempDistMean = round(Temp - mean(airQ$Temp), 2))
mean(airQ$Ozone)
# we have to remove the NA values
mean(airQ$Ozone, na.rm = TRUE)
mutate(airQ, OzoneDistMean = round(Ozone - mean(Ozone, na.rm = TRUE), 2))
# 5. groupby function
airQ <- mutate(airQ, WindGroup = factor(Wind> 10, labels= c('Below', "Above")))
wind <- group_by(airQ, WindGroup)
summarize(wind, meanTemp = mean(Temp), maxTemp = max(Temp))
month <- group_by(airQ, Month)
summarize(month, meanTemp = mean(Temp), maxTemp = max(Temp), minTemp = min(Temp))
# join functions
products <- data.frame("product_id" = c(1,2,3,4,5, 8),
"product_name" = c("Adobo", "Bangus", "Tilapia", "Rice", "Spam", "Hotdog"))
orders <- data.frame("order_id" = c(1,2,3,4,5,6,7),
"product_id" = c(2,5,4,3,1,6,3),
"number" = c(2,2,1,4,3,2,1))
inner_join(products,orders, by = c("product_id" = "product_id"))
#another way to do it
products %>% inner_join(orders, by = c("product_id" = "product_id"))
products %>% left_join(orders, by = c("product_id" = "product_id"))
products %>% right_join(orders, by = c("product_id" = "product_id"))
products %>% full_join(orders, by = c("product_id" = "product_id"))
summarize(wind, meanTemp = mean(Temp), maxTemp = max(Temp))
summarize(month, meanTemp = mean(Temp), maxTemp = max(Temp), minTemp = min(Temp))
mutate(airQ, OzoneDistMean = round(Ozone - mean(Ozone, na.rm = TRUE), 2))
?tibble
today <- as.Date("2020-10-13")
today
class(today)
# dates in R start at 1970-01-01
# unclass is the number of days from 1970-01-01
birthday <- as.Date("2002-08-26")
diff <- today - birthday
diff
unclass(birthday)
birthday - as.Date("1970-01-01")
# Get system time
time <- Sys.time()
time
class(time)
# Convert from POSIXct to POSIXlt
p <- as.POSIXlt(time)
names(unclass(p))
# times in POSIXlt format have attributes like sec, min, wday
# we can access these attributes using $
p$sec
p$min
# strptime function takes a character vector
# and converts it into a POSIXlt object
datestring <- c("August 26, 2010")
x <- strptime(datestring, format = "%B %d, %Y")
x
rizal <- as.Date("1861-06-19")
ninoy <- as.Date("1932-11-27")
ninoy - rizal
x <- mtcars
class(x)
library(dplyr)
filter(x, wt>5& disp >460)
dim(x)
filter(x, mpg>30)
y <- filter(x, am == 0)
dim(y)
nutrients <- data.frame(Treatment = c(1,1,1,2,2,2),Replicate = c(1,2,3,1,2,3), Ammonium = c(8.2,6.9,12.1,10.5,8.6,7.8), Nitrate = c(1.7,3.6,2.8,0.4,2.7,4.1))
carbon <- data.frame(Treatment=c(1,1,2,2,2,3,3,3),Replicate=c(1,3,1,2,3,1,2,3),Carbon=c(42.5,49.1,40.8,50.4,50.8,45.6,48.7,43.5))
nutrients %>% right_join(carbon, by = c("Treatment", "Replicate"))
time$sec
p$sec
p$min
p$hr
p$hour
names(p)
names(unclass(p))
datestring <- c("August 26, 2010")
x <- strptime(datestring, format = "%B %d, %Y")
x
class(x)
mtcars
library("swirl")
swirl()
help()
f]
digit_prod <- function(x){
x <- as.character(x)
product <- 1
number <- nchar(x)
for(i in 1:number){
product <- product * as.numeric(substr(x, i, i))
i <- i + 1
}
return(product)
}
digit_prod(65536)
digit_prod(208965)
digit_prod(2**32)
x <- c("a", "b", "c", "d")
for(i in 1:4) {print(x[i])}
f <- function() {}
f()
f <- function(num) {
for(i in 1:num) {
cat("Hello, world!\n")
}
}
f(3)
f <- function(a, b) {a^2}
f(2)
if(FALSE) print("In if block") else print("In else block")
?cat
sum_multiples <- function(x){
sum <- 0
A <- seq(4, x, 4)
B <- seq(7, x, 7)
if(x>=28){
C <- seq(28, x, 28)
}
else{
C = 0
}
sum <- sum + sum(A) + sum(B) - sum(C)
return(sum)
}
sum_multiples(1000)
?substr
reverse <- function(c){
c <- as.character(c)
len <- nchar(c)
new <- ""
for(i in len:1){
new <- paste(new, substr(c, i, i), collapse = "", sep = "")
}
return(new)
}
reverse("Ateneo")
version
--version
R version
version
q()
y = cat(2,3,2,7,6,8,10,7,8,12,11,14)
x1 = cat(0,2,2,2,4,4,4,6,6,6,8,8)
x2 = cat(2,6,7,5,9,8,7,10,11,9,15,13)
y = c(2,3,2,7,6,8,10,7,8,12,11,14)
x1 = c(0,2,2,2,4,4,4,6,6,6,8,8)
x2 = c(2,6,7,5,9,8,7,10,11,9,15,13)
y = c(2,3,2,7,6,8,10,7,8,12,11,14)
x1 = c(0,2,2,2,4,4,4,6,6,6,8,8)
x2 = c(2,6,7,5,9,8,7,10,11,9,15,13)
A = cbind(y,x1,x2)
A
summary(A)
summary(A)
plot(y ~ x1, data = A)
ln(y ~ x1, data = A)
lm(y ~ x1, data = A)
y = c(2,3,2,7,6,8,10,7,8,12,11,14)
x1 = c(0,2,2,2,4,4,4,6,6,6,8,8)
x2 = c(2,6,7,5,9,8,7,10,11,9,15,13)
A = cbind(y,x1,x2)
A.type
y = c(2,3,2,7,6,8,10,7,8,12,11,14)
x1 = c(0,2,2,2,4,4,4,6,6,6,8,8)
x2 = c(2,6,7,5,9,8,7,10,11,9,15,13)
A = cbind(y,x1,x2)
type(A)
y = c(2,3,2,7,6,8,10,7,8,12,11,14)
x1 = c(0,2,2,2,4,4,4,6,6,6,8,8)
x2 = c(2,6,7,5,9,8,7,10,11,9,15,13)
A = cbind(y,x1,x2)
typeof(A)
y = c(2,3,2,7,6,8,10,7,8,12,11,14)
x1 = c(0,2,2,2,4,4,4,6,6,6,8,8)
x2 = c(2,6,7,5,9,8,7,10,11,9,15,13)
A = data.frame(y,x1,x2)
y = c(2,3,2,7,6,8,10,7,8,12,11,14)
x1 = c(0,2,2,2,4,4,4,6,6,6,8,8)
x2 = c(2,6,7,5,9,8,7,10,11,9,15,13)
A = data.frame(y,x1,x2)
A
summary(A)
plot(y ~ x1, data = A)
lm(y ~ x1, data = A)
?lm
lm(y ~ x1, data = A)
lm(y ~ x2, data = A)
summary(lm(y ~ x1, data = A))
lm(y ~ x1 + x2, data = A)
summary(lm(y ~ x1 + x2, data = A))
?cat
X = cat(y, x1,x2)
X = c(y, x1,x2)
X = c(y, x1,x2)
X = c(y, x1,x2)
x
X = c(y, x1,x2)
X
X = cbind(y, x1,x2)
X
x0 = rep(1,12)
X = cbind(y, x1,x2)
X
x0 = rep(1,12)
X = cbind(y, x0, x1,x2)
X
x0 = rep(1,12)
X = cbind(y, x0, x1,x2)
XtX = t(X) %*% X
Xty = t(X) %*% y
XtXi = solve(XtX)
beta = XtXi%*%Xty
x0 = rep(1,12)
X = cbind(y, x0, x1,x2)
XtX = t(X) %*% X
Xty = t(X) %*% y
XtXi = solve(XtX)
beta = XtXi%*%Xty
beta
x0 = rep(1,12)
X = cbind(x0, x1,x2)
XtX = t(X) %*% X
Xty = t(X) %*% y
XtXi = solve(XtX)
beta = XtXi%*%Xty
beta
data_1 = read.csv("PS3.csv")
data_1 = data_1[-1] # remove ID column
data_1
model1 = summary(lm(y ~., data = data_1))
model1
model_1 = lm(y ~., data = data_1)
data_1 = read.csv("PS3.csv")
data_1 = data_1[-1] # remove ID column
typeof(data_1)
data_1 = read.csv("PS3.csv")
data_1 = data_1[-1] # remove ID column
data_1
yA = c(2.3,1.2,2.9,2.0,1.5)
yB = c(5.0,5.8,6.3,6.5,7.0)
yC = c(3.4,4.1,3.9,3.1,4.5)
yD = c(4.6,4.8,5.0,5.2,4.9)
y = c(yA,yB,yC,yD)
n = length(yA)
k = 4
xA = c(rep(1,n), rep(0,n), rep(0,n), rep(0,n))
xB = c(rep(0,n), rep(1,n), rep(0,n), rep(0,n))
xC = c(rep(0,n), rep(0,n), rep(1,n), rep(0,n))
xD = c(rep(0,n), rep(0,n), rep(0,n), rep(1,n))
X = cbind(xA,xB, xC, xD)
X
df1 = k-1
df2 = k*(n-1)
XtXi = matrix(rep(0, k*k), nrow = k)
for(i in 1:k){
XtXi[i,i] = 1/n
}
XtXi
beta = XtXi %*% t(X) %*%y
beta
beta = XtXi %*% t(X) %*%y
beta
beta = XtXi %*% t(X) %*%y
beta
SSE = t(y)%*%y - t(beta)%*%t(X)%*%y
s2 = SSE/df2
c = t(c(1,-1,0,0))
df1.1 = 1
Fnum = t(c%*%beta)%*%solve(c%*%XtXi%*%t(c))%*%(c%*%beta)
Fdenom = SSE
F.1=(Fnum/1)/(Fdenom/df2)
F.1
pval = 1-pf(F.1,df1.1,df2)
pval
ylab = c(rep("A",5), rep("B",5), rep("C", 5), rep("D", 5))
d2 = data.frame(y, factor(ylab))
colnames(d2) = c("y", "group")
y.aov = aov(y~group, data = d2)
summary(y.aov)
summary.lm(y.aov)
d2$group = relevel(d2$group, ref = 2)
d2.aov2 = aov(y~group, data = d2)
summary(d2)
d2$group = relevel(d2$group, ref = 2)
d2.aov2 = aov(y~group, data = d2)
summary(d2.aov2)
d2$group = relevel(d2$group, ref = 2)
d2.aov2 = aov(y~group, data = d2)
summary(d2.aov2)
summary.lm(d2.aov2)
c = t(c(0,1,-1,0))
df1.1 = 1
Fnum = t(c%*%beta)%*%solve(c%*%XtXi%*%t(c))%*%(c%*%beta)
Fdenom = SSE
F.1=(Fnum/1)/(Fdenom/df2)
F.1
pval = 1-pf(F.1,df1.1,df2)
pval
Fnum = t(C%*%beta)%*%solve(C%*%XtXi%*%t(C))%*%(C%*%beta)
C = matrix(c(1,-1,0,0,1,0,-1,0,1,0,0,-1), nrow = 3, ncol = 4, byrow = TRUE)
C
Fnum = t(C%*%beta)%*%solve(C%*%XtXi%*%t(C))%*%(C%*%beta)
Fnum
Fdenom = SSE
F.all = (Fnum/df1)/(Fdenom/df2)
F.all
#F test
p = 1 - pf(F.1,df1,df2)
p
y = c(21.1, 23.6, 19.3,33,28.6,35,32,26.8,38.6,21.7,15.7,20.6,41.8,36.7,28.4,23.6,31.8,20.7,22.8,32.8)
x0 = c(rep(1,20))
x1 = c(8,5,2,15,11,14,9,7,22,3,1,5,23,17,12,14,8,4,2,8)
x2 = c(35,43,51,60,73,80,76,54,55,90,30,44,84,76,68,25,90,62,80,72)
X = cbind(x0,x1,x2)
y = c(21.1, 23.6, 19.3,33,28.6,35,32,26.8,38.6,21.7,15.7,20.6,41.8,36.7,28.4,23.6,31.8,20.7,22.8,32.8)
x0 = c(rep(1,20))
x1 = c(8,5,2,15,11,14,9,7,22,3,1,5,23,17,12,14,8,4,2,8)
x2 = c(35,43,51,60,73,80,76,54,55,90,30,44,84,76,68,25,90,62,80,72)
X = cbind(x0,x1,x2)
XtXi = solve(t(X)%*%X)
Xty = t(X)%*%y
beta = XtXi%*%Xty
XtXi
Xty
beta
H = diag(20) - X%*%XtXi%*%t(X)
c = matrix(c(0,1,0,0,0,1), nrow = 2, ncol = 3, byrow = TRUE)
c
H = diag(20) - X%*%XtXi%*%t(X)
c = matrix(c(0,1,0,0,0,1), nrow = 2, ncol = 3, byrow = TRUE)
c
Fnum = t(c%*%beta)%*%solve(c%*%XtXi%*%t(c))%*%(c%*%beta)
Fdenom = t(y)%*%H%*%y
R2 = Fnum/(Fnum+Fdenom)
R2
library(Matrix)
k = rankMatrix(c)
df1 = 2
df2 = 17
F.all = (Fnum/df1)/(Fdenom/df2)
F.all
pval = 1-pf(F.all,df1,df2)
pval
data1 = data.frame(y,x1,x2)
model = lm(y~., data = data1)
summary(model)
library(Matrix)
df1 = rankMatrix(c)
df2 = 17
F.all = (Fnum/df1)/(Fdenom/df2)
F.all
pval = 1-pf(F.all,df1,df2)
pval
library(Matrix)
k = rankMatrix(c)
df1 = rankMatrix(c)
df2 = 17
F.all = (Fnum/df1)/(Fdenom/df2)
F.all
pval = 1-pf(F.all,df1,df2)
pval
library(Matrix)
k = rankMatrix(c)
k
df1 = rankMatrix(c)
df2 = 17
F.all = (Fnum/df1)/(Fdenom/df2)
F.all
pval = 1-pf(F.all,df1,df2)
pval
library(Matrix)
k = rankMatrix(c)
df1 = k
df2 = 17
F.all = (Fnum/df1)/(Fdenom/df2)
F.all
pval = 1-pf(F.all,df1,df2)
pval
library(Matrix)
df1 = 2
df2 = 17
F.all = (Fnum/df1)/(Fdenom/df2)
F.all
pval = 1-pf(F.all,df1,df2)
pval
library(Matrix)
c = t(c(1,0,0))
Fnum = t(c%*%beta)%*%solve(c%*%XtXi%*%t(c))%*%(c%*%beta)
Fdenom = t(y)%*%H%*%y
df1 = 1
df2 = 17
F.all = (Fnum/df1)/(Fdenom/df2)
F.all
pval = 1-pf(F.all,df1,df2)
pval
library(Matrix)
c = t(c(0,1,0))
Fnum = t(c%*%beta)%*%solve(c%*%XtXi%*%t(c))%*%(c%*%beta)
Fdenom = t(y)%*%H%*%y
df1 = 1
df2 = 17
F.all = (Fnum/df1)/(Fdenom/df2)
F.all
pval = 1-pf(F.all,df1,df2)
pval
library(Matrix)
c = t(c(0,1,0))
Fnum = t(c%*%beta)%*%solve(c%*%XtXi%*%t(c))%*%(c%*%beta)
Fdenom = t(y)%*%H%*%y
df1 = 1
df2 = 17
F.all = (Fnum/df1)/(Fdenom/df2)
F.all
pval = 1-pf(F.all,df1,df2)
pval
library(Matrix)
c = t(c(0,0,1))
Fnum = t(c%*%beta)%*%solve(c%*%XtXi%*%t(c))%*%(c%*%beta)
Fdenom = t(y)%*%H%*%y
df1 = 1
df2 = 17
F.all = (Fnum/df1)/(Fdenom/df2)
F.all
pval = 1-pf(F.all,df1,df2)
pval
setwd("~/Math 62.2 R Codes")
c = matrix(c(0,1,0,0,0,1), nrow = 2, ncol =3, byrow = TRUE)
c
c = matrix(c(0,1,0,0,0,1), nrow = 2, ncol =3, byrow = TRUE)
Fnum = t(c%*%beta)%*%solve(c%*%XtXi%*%t(c))%*%(c%*%beta)
Fdenom = t(y)%*%H%*%y
df1 =2
df2 = 17
F.all = (Fnum/df1)/(Fdenom/df2)
F.all
pval = 1-pf(F.all,df1,df2)
pval
