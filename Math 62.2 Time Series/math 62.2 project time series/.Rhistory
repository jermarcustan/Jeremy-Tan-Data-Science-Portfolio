final_5yrs = exp(final.ln_5yrs)
train = psei_ts
predicted = ts(final_5yrs[c(401:460)], start = c(2020,6), frequency = 12)
plot(train, col = "blue", main = "5 years forecast for the PSEi", xlab = "Year", ylab = "Price")
lines(predicted, col = "red")
legend("topleft", legend = c("Training Data", "Foreasted Values"), col = c("blue", "red"), lty = 1)
predicted
forecast_5yrs = predict(model, n.ahead = 60)$pred
final.ln.diff_5yrs = ts(c(psei_ts_ln_diff,forecast_5yrs), start = c(1987, 3), frequency = 12)
final.ln_5yrs = diffinv(final.ln.diff_5yrs, differences = 1, xi = psei_ts_ln[1])
final_5yrs = exp(final.ln_5yrs)
train = psei_ts
predicted = ts(final_5yrs[c(401:460)], start = c(2020,6), frequency = 12)
plot(train, col = "blue", main = "5 years forecast for the PSEi", ylim = range(min(psei_test_2, predicted), max(psei_test_2, predicted)), xlab = "Year", ylab = "Price")
lines(predicted, col = "red")
legend("topleft", legend = c("Training Data", "Foreasted Values"), col = c("blue", "red"), lty = 1)
forecast_5yrs = predict(model, n.ahead = 60)$pred
final.ln.diff_5yrs = ts(c(psei_ts_ln_diff,forecast_5yrs), start = c(1987, 3), frequency = 12)
final.ln_5yrs = diffinv(final.ln.diff_5yrs, differences = 1, xi = psei_ts_ln[1])
final_5yrs = exp(final.ln_5yrs)
train = psei_ts
predicted = ts(final_5yrs[c(401:460)], start = c(2020,6), frequency = 12)
plot(train, col = "blue", main = "5 years forecast for the PSEi", ylim = range(min(psei_test_2, predicted), max(psei_test_2, predicted)), xlab = "Year", ylab = "Price")
lines(predicted, col = "red")
legend("topleft", legend = c("Training Data", "Foreasted Values"), col = c("blue", "red"), lty = 1)
axis(1, at = seq(1987, 2025, by = 1))
forecast_5yrs = predict(model, n.ahead = 60)$pred
final.ln.diff_5yrs = ts(c(psei_ts_ln_diff,forecast_5yrs), start = c(1987, 3), frequency = 12)
final.ln_5yrs = diffinv(final.ln.diff_5yrs, differences = 1, xi = psei_ts_ln[1])
final_5yrs = exp(final.ln_5yrs)
train = psei_ts
predicted = ts(final_5yrs[c(401:460)], start = c(2020,6), frequency = 12)
plot(train, col = "blue", main = "5 years forecast for the PSEi", ylim = range(min(psei_test_2, predicted), max(psei_test_2, predicted)), xlab = "Year", ylab = "Price")
lines(predicted, col = "red")
legend("topleft", legend = c("Training Data", "Foreasted Values"), col = c("blue", "red"), lty = 1)
axis(1, at = seq(1987, 2025, by = 5))
forecast_5yrs = predict(model, n.ahead = 60)$pred
final.ln.diff_5yrs = ts(c(psei_ts_ln_diff,forecast_5yrs), start = c(1987, 3), frequency = 12)
final.ln_5yrs = diffinv(final.ln.diff_5yrs, differences = 1, xi = psei_ts_ln[1])
final_5yrs = exp(final.ln_5yrs)
train = psei_ts
predicted = ts(final_5yrs[c(401:460)], start = c(2020,6), frequency = 12)
plot(train, col = "blue", main = "5 years forecast for the PSEi", ylim = range(min(psei_test_2, predicted), max(psei_test_2, predicted)), xlab = "Year", ylab = "Price")
lines(predicted, col = "red")
legend("topleft", legend = c("Training Data", "Foreasted Values"), col = c("blue", "red"), lty = 1)
final_5yrs
final_5yrs
forecast_5yrs = predict(model, n.ahead = 60)$pred
final.ln.diff_5yrs = ts(c(psei_ts_ln_diff,forecast_5yrs), start = c(1987, 3), frequency = 12)
final.ln_5yrs = diffinv(final.ln.diff_5yrs, differences = 1, xi = psei_ts_ln[1])
final_5yrs = exp(final.ln_5yrs)
train = psei_ts
predicted = ts(final_5yrs[c(401:460)], start = c(2020,6), frequency = 12)
plot(train, col = "blue", main = "5 years forecast for the PSEi", ylim = range(min(train, predicted), max(train, predicted)), xlab = "Year", ylab = "Price")
lines(predicted, col = "red")
legend("topleft", legend = c("Training Data", "Foreasted Values"), col = c("blue", "red"), lty = 1)
start_date <- as.Date("1987-02-01")
end_date <- as.Date("2025-05-01")
xlim_dates <- seq(start_date, end_date, by = "month")
# Convert the xlim_dates to the appropriate format for xlim
xlim_values <- as.numeric(format(xlim_dates, "%Y")) + (as.numeric(format(xlim_dates, "%m")) - 1) / 12
# Set the xlim using the xlim_values
xlim(c(min(xlim_values), max(xlim_values)))
# Set the x-axis labels
axis(1, at = xlim_values, labels = format(xlim_dates, "%Y-%m"))
forecast_5yrs = predict(model, n.ahead = 60)$pred
final.ln.diff_5yrs = ts(c(psei_ts_ln_diff,forecast_5yrs), start = c(1987, 3), frequency = 12)
final.ln_5yrs = diffinv(final.ln.diff_5yrs, differences = 1, xi = psei_ts_ln[1])
final_5yrs = exp(final.ln_5yrs)
train = psei_ts
predicted = ts(final_5yrs[c(401:460)], start = c(2020,6), frequency = 12)
plot(train, col = "blue", main = "5 years forecast for the PSEi", ylim = range(min(train, predicted), max(train, predicted)), xlab = "Year", ylab = "Price")
lines(predicted, col = "red")
legend("topleft", legend = c("Training Data", "Foreasted Values"), col = c("blue", "red"), lty = 1)
forecast_5yrs = predict(model, n.ahead = 60)$pred
final.ln.diff_5yrs = ts(c(psei_ts_ln_diff,forecast_5yrs), start = c(1987, 3), frequency = 12)
final.ln_5yrs = diffinv(final.ln.diff_5yrs, differences = 1, xi = psei_ts_ln[1])
final_5yrs = exp(final.ln_5yrs)
train = psei_ts
predicted = ts(final_5yrs[c(401:460)], start = c(2020,6), frequency = 12)
plot(train, col = "blue", main = "5 years forecast for the PSEi", ylim = range(min(train, predicted), max(train, predicted)), xlab = "Year", ylab = "Price")
lines(predicted, col = "red")
legend("topleft", legend = c("Training Data", "Foreasted Values"), col = c("blue", "red"), lty = 1)
forecast_5yrs = predict(model, n.ahead = 60)$pred
final.ln.diff_5yrs = ts(c(psei_ts_ln_diff,forecast_5yrs), start = c(1987, 3), frequency = 12)
final.ln_5yrs = diffinv(final.ln.diff_5yrs, differences = 1, xi = psei_ts_ln[1])
final_5yrs = exp(final.ln_5yrs)
train = psei_ts
predicted = ts(final_5yrs[c(401:460)], start = c(2020,6), frequency = 12)
plot(predicted, col = "red")
lines(train, col = "blue", main = "5 years forecast for the PSEi", ylim = range(min(train, predicted), max(train, predicted)), xlab = "Year", ylab = "Price")
legend("topleft", legend = c("Training Data", "Foreasted Values"), col = c("blue", "red"), lty = 1)
forecast_5yrs = predict(model, n.ahead = 60)$pred
final.ln.diff_5yrs = ts(c(psei_ts_ln_diff,forecast_5yrs), start = c(1987, 3), frequency = 12)
final.ln_5yrs = diffinv(final.ln.diff_5yrs, differences = 1, xi = psei_ts_ln[1])
final_5yrs = exp(final.ln_5yrs)
train = psei_ts
predicted = ts(final_5yrs[c(401:460)], start = c(2020,6), frequency = 12)
plot(train, col = "blue", main = "5 years forecast for the PSEi", ylim = range(min(train, predicted), max(train, predicted)), xlab = "Year", ylab = "Price")
lines(predicted, col = "red")
legend("topleft", legend = c("Training Data", "Foreasted Values"), col = c("blue", "red"), lty = 1)
forecast_5yrs = predict(model, n.ahead = 60)$pred
final.ln.diff_5yrs = ts(c(psei_ts_ln_diff,forecast_5yrs), start = c(1987, 3), frequency = 12)
final.ln_5yrs = diffinv(final.ln.diff_5yrs, differences = 1, xi = psei_ts_ln[1])
final_5yrs = exp(final.ln_5yrs)
train = psei_ts
predicted = ts(final_5yrs[c(401:460)], start = c(2020,6), frequency = 12)
plot(train, col = "blue", main = "5 years forecast for the PSEi", ylim = range(min(train, predicted), max(train, predicted)), xlab = "Year", ylab = "Price")
lines(predicted, col = "red")
legend("topleft", legend = c("Training Data", "Foreasted Values"), col = c("blue", "red"), lty = 1)
psei_test_2 = ts(psei_test, start = c(1987, 2), frequency = 12)
model = Arima(psei_ts_ln_diff, order = c(1,0,0))
forecast_2yrs = predict(model, n.ahead = 24)$pred
final.ln.diff_2yrs = ts(c(psei_ts_ln_diff,forecast_2yrs), start = c(1987, 3), frequency = 12)
final.ln_2yrs = diffinv(final.ln.diff_2yrs, differences = 1, xi = psei_ts_ln[1])
final_2yrs = exp(final.ln_2yrs)
train = psei_ts
test = ts(psei_test_2[c(401:424)], start = c(2020,6), frequency = 12)
predicted = ts(final_2yrs[c(401:424)], start = c(2020,6), frequency = 12)
# Set the range for x-axis
xlim_dates <- seq(as.Date("1987-01-01"), as.Date("2022-12-01"), by = "year")
plot(train, col = "blue", ylim = range(min(train, predicted), max(train, predicted)), main = "2-year forecast for the PSEi", xlab = "Year", ylab = "Price", xlim = c(min(xlim_dates), max(xlim_dates)))
# Set the x-axis labels
xts::axis.Date(1, at = xlim_dates, format = "%Y")
install.packages("xts")
install.packages("xts")
library("TSA")
library("tseries")
library("lmtest")
library("tidyverse")
library("forecast")
library("quantmod")
library("ggplot2")
library("xts")
library("MLmetrics")
psei = read.csv("PSEI.PS.csv")
psei$Date =  as.Date(psei$Date, format = "%d/%m/%Y") # format the dates as date objects
psei = psei[rowSums(is.na(psei)) != ncol(psei),] # remove empty rows
rownames(psei) = psei$Date
psei
psei = psei["Close"]
psei_train = head(psei, 399)
psei_test = psei
psei = psei_train
psei_ts = ts(psei_train, start = c(1987, 2), frequency = 12)
#png(filename = "nonstationary.png")
plot(psei_ts, main = "Monthly Closing Prices for the PSEi")
#dev.off()
psei
adf.test(psei_ts)
#png(filename="stationary.png")
psei_ts_ln = log(psei_ts)
psei_ts_ln_diff = diff(psei_ts_ln)
plot(psei_ts_ln_diff, main = "Stationary Time Series Plot after differencing and log transform")
#dev.off()
adf.test(psei_ts_ln_diff)
Box.test(psei_ts_ln_diff, type = "Ljung")
#png(filename="acf.png")
Acf(psei_ts_ln_diff, main = "ACF Correlogram") #MA(1)
#dev.off()
#png(filename="pacf.png")
Acf(psei_ts_ln_diff, type = "partial", main = "PACF Correlogram") #AR(1)
#dev.off()
arima(psei_ts_ln_diff, order = c(1,0,0))
arima(psei_ts_ln_diff, order = c(0,0,1))
arima(psei_ts_ln_diff, order = c(1,0,1))
fit = arima(psei_ts_ln_diff, order = c(1,0,0))
checkresiduals(fit)
residuals = fit$residuals
Acf(residuals)
Pacf(residuals)
psei_test_2 = ts(psei_test, start = c(1987, 2), frequency = 12)
model = Arima(psei_ts_ln_diff, order = c(1,0,0))
forecast_2yrs = predict(model, n.ahead = 24)$pred
final.ln.diff_2yrs = ts(c(psei_ts_ln_diff,forecast_2yrs), start = c(1987, 3), frequency = 12)
final.ln_2yrs = diffinv(final.ln.diff_2yrs, differences = 1, xi = psei_ts_ln[1])
final_2yrs = exp(final.ln_2yrs)
train = psei_ts
test = ts(psei_test_2[c(400:423)], start = c(2020,5), frequency = 12)
predicted = ts(final_2yrs[c(400:423)], start = c(2020,5), frequency = 12)
#png("forecast_2yrs.png")
plot(train, col = "blue", ylim = range(min(train, predicted), max(train, predicted)), main = "2-year forecast for the PSEi", xlab = "Year", ylab = "Price", xlim = c(1987, 2023), xaxt = "n")
lines(test, col = "#028A0F")
lines(predicted, col = "red")
legend("topleft", legend = c("Training Data", "Testing Data", "Forecasted Values"), col = c("blue", "#028A0F", "red"), lty = 1)
axis(1, at = seq(1987, 2026, by = 5), labels = seq(1987, 2026, by = 5))
# Close the PNG graphics device
#dev.off()
forecast_5yrs = predict(model, n.ahead = 60)$pred
final.ln.diff_5yrs = ts(c(psei_ts_ln_diff,forecast_5yrs), start = c(1987, 3), frequency = 12)
final.ln_5yrs = diffinv(final.ln.diff_5yrs, differences = 1, xi = psei_ts_ln[1])
final_5yrs = exp(final.ln_5yrs)
train = psei_ts
predicted = ts(final_5yrs[c(400:459)], start = c(2020,5), frequency = 12)
#png("forecast_5yrs.png")
plot(train, col = "blue", main = "5-year forecast for the PSEi", ylim = range(min(train, predicted), max(train, predicted)), xlab = "Year", ylab = "Price", xlim = c(1987, 2027), xaxt = "n")
lines(predicted, col = "red")
legend("topleft", legend = c("Training Data", "Forecasted Values"), col = c("blue", "red"), lty = 1)
axis(1, at = seq(1987, 2027, by = 5), labels = seq(1987, 2027, by = 5))
# Plot is saved as "forecast_plot.png"
# Close the PNG graphics device
#dev.off()
library("TSA")
library("tseries")
library("lmtest")
library("tidyverse")
library("forecast")
library("quantmod")
library("ggplot2")
library("xts")
psei = read.csv("PSEI.PS.csv")
psei$Date =  as.Date(psei$Date, format = "%d/%m/%Y") # format the dates as date objects
psei = psei[rowSums(is.na(psei)) != ncol(psei),] # remove empty rows
rownames(psei) = psei$Date
psei
psei = psei["Close"]
psei_train = head(psei, 399)
psei_test = psei
psei = psei_train
psei_ts = ts(psei_train, start = c(1987, 2), frequency = 12)
#png(filename = "nonstationary.png")
plot(psei_ts, main = "Monthly Closing Prices for the PSEi")
#dev.off()
psei_test
adf.test(psei_ts)
#png(filename="stationary.png")
psei_ts_ln = log(psei_ts)
psei_ts_ln_diff = diff(psei_ts_ln)
plot(psei_ts_ln_diff, main = "Stationary Time Series Plot after differencing and log transform")
#dev.off()
adf.test(psei_ts_ln_diff)
Box.test(psei_ts_ln_diff, type = "Ljung")
#png(filename="acf.png")
Acf(psei_ts_ln_diff, main = "ACF Correlogram") #MA(1)
#dev.off()
#png(filename="pacf.png")
Acf(psei_ts_ln_diff, type = "partial", main = "PACF Correlogram") #AR(1)
#dev.off()
acf(psei_ts_ln_diff)
acf(psei_ts_ln_diff, type="partial")
arima(psei_ts_ln_diff, order = c(1,0,0))
arima(psei_ts_ln_diff, order = c(0,0,1))
arima(psei_ts_ln_diff, order = c(1,0,1))
arima(psei_ts_ln_diff, order = c(1,0,0))
arima(psei_ts_ln_diff, order = c(0,0,1))
arima(psei_ts_ln_diff, order = c(1,0,1))
fit = arima(psei_ts_ln_diff, order = c(1,0,0))
checkresiduals(fit)
residuals = fit$residuals
Acf(residuals)
Pacf(residuals)
psei_test_2 = ts(psei_test, start = c(1987, 2), frequency = 12)
model = Arima(psei_ts_ln_diff, order = c(1,0,0))
forecast_2yrs = predict(model, n.ahead = 24)$pred
final.ln.diff_2yrs = ts(c(psei_ts_ln_diff,forecast_2yrs), start = c(1987, 3), frequency = 12)
final.ln_2yrs = diffinv(final.ln.diff_2yrs, differences = 1, xi = psei_ts_ln[1])
final_2yrs = exp(final.ln_2yrs)
train = psei_ts
test = ts(psei_test_2[c(400:423)], start = c(2020,5), frequency = 12)
predicted = ts(final_2yrs[c(400:423)], start = c(2020,5), frequency = 12)
#png("forecast_2yrs.png")
plot(train, col = "blue", ylim = range(min(train, predicted), max(train, predicted)), main = "2-year forecast for the PSEi", xlab = "Year", ylab = "Price", xlim = c(1987, 2023), xaxt = "n")
lines(test, col = "#028A0F")
lines(predicted, col = "red")
legend("topleft", legend = c("Training Data", "Testing Data", "Forecasted Values"), col = c("blue", "#028A0F", "red"), lty = 1)
axis(1, at = seq(1987, 2026, by = 5), labels = seq(1987, 2026, by = 5))
# Close the PNG graphics device
#dev.off()
psei_test_3 = ts(psei_test, start = c(1987, 2), frequency = 12)
psei_test_ln = log(psei_test_3)
psei_test_ln_d = diff(psei_test_ln)
model = Arima(psei_test_ln_d, order = c(1,0,0))
forecast_3yrs = predict(model, n.ahead = 36)$pred
final.ln.diff_3yrs = ts(c(psei_ts_ln_diff,forecast_3yrs), start = c(1987, 3), frequency = 12)
final.ln_3yrs = diffinv(final.ln.diff_5yrs, differences = 1, xi = psei_ts_ln[1])
psei_test_3 = ts(psei_test, start = c(1987, 2), frequency = 12)
psei_test_ln = log(psei_test_3)
psei_test_ln_d = diff(psei_test_ln)
model = Arima(psei_test_ln_d, order = c(1,0,0))
forecast_3yrs = predict(model, n.ahead = 36)$pred
final.ln.diff_3yrs = ts(c(psei_ts_ln_diff,forecast_3yrs), start = c(1987, 3), frequency = 12)
final.ln_3yrs = diffinv(final.ln.diff_3yrs, differences = 1, xi = psei_ts_ln[1])
final_3yrs = exp(final.ln_3yrs)
train = psei_test_3
predicted = ts(final_3yrs[c(424:459)], start = c(2022,5), frequency = 12)
#png("forecast_3yrs.png")
plot(train, col = "blue", main = "3-year forecast for the PSEi", ylim = range(min(train, predicted), max(train, predicted)), xlab = "Year", ylab = "Price", xlim = c(1987, 2027), xaxt = "n")
psei_test_3
library("TSA")
library("tseries")
library("lmtest")
library("tidyverse")
library("forecast")
library("quantmod")
library("ggplot2")
library("xts")
psei = read.csv("PSEI.PS.csv")
psei$Date =  as.Date(psei$Date, format = "%d/%m/%Y") # format the dates as date objects
psei = psei[rowSums(is.na(psei)) != ncol(psei),] # remove empty rows
rownames(psei) = psei$Date
psei
psei = psei["Close"]
psei_train = head(psei, 399)
psei_test = psei
psei = psei_train
psei_ts = ts(psei_train, start = c(1987, 2), frequency = 12)
#png(filename = "nonstationary.png")
plot(psei_ts, main = "Monthly Closing Prices for the PSEi")
#dev.off()
psei_test
adf.test(psei_ts)
#png(filename="stationary.png")
psei_ts_ln = log(psei_ts)
psei_ts_ln_diff = diff(psei_ts_ln)
plot(psei_ts_ln_diff, main = "Stationary Time Series Plot after differencing and log transform")
#dev.off()
adf.test(psei_ts_ln_diff)
Box.test(psei_ts_ln_diff, type = "Ljung")
#png(filename="acf.png")
Acf(psei_ts_ln_diff, main = "ACF Correlogram") #MA(1)
#dev.off()
#png(filename="pacf.png")
Acf(psei_ts_ln_diff, type = "partial", main = "PACF Correlogram") #AR(1)
#dev.off()
acf(psei_ts_ln_diff)
acf(psei_ts_ln_diff, type="partial")
arima(psei_ts_ln_diff, order = c(1,0,0))
arima(psei_ts_ln_diff, order = c(0,0,1))
arima(psei_ts_ln_diff, order = c(1,0,1))
fit = arima(psei_ts_ln_diff, order = c(1,0,0))
checkresiduals(fit)
residuals = fit$residuals
Acf(residuals)
Pacf(residuals)
psei_test_3 = ts(psei_test, start = c(1987, 2), frequency = 12)
psei_test_ln = log(psei_test_3)
psei_test_ln_d = diff(psei_test_ln)
model = Arima(psei_test_ln_d, order = c(1,0,0))
forecast_3yrs = predict(model, n.ahead = 36)$pred
final.ln.diff_3yrs = ts(c(psei_ts_ln_diff,forecast_3yrs), start = c(1987, 3), frequency = 12)
final.ln_3yrs = diffinv(final.ln.diff_3yrs, differences = 1, xi = psei_ts_ln[1])
final_3yrs = exp(final.ln_3yrs)
train = psei_test_3
predicted = ts(final_3yrs[c(424:459)], start = c(2022,5), frequency = 12)
#png("forecast_3yrs.png")
plot(train, col = "blue", main = "3-year forecast for the PSEi", ylim = range(min(train, predicted), max(train, predicted)), xlab = "Year", ylab = "Price", xlim = c(1987, 2027), xaxt = "n")
library("TSA")
library("tseries")
library("lmtest")
library("tidyverse")
library("forecast")
library("quantmod")
library("ggplot2")
library("xts")
library("MLmetrics")
psei = read.csv("PSEI.PS.csv")
psei$Date =  as.Date(psei$Date, format = "%d/%m/%Y") # format the dates as date objects
psei = psei[rowSums(is.na(psei)) != ncol(psei),] # remove empty rows
rownames(psei) = psei$Date
psei
psei = psei["Close"]
psei_train = head(psei, 399)
psei_test = psei
psei = psei_train
psei_ts = ts(psei_train, start = c(1987, 2), frequency = 12)
#png(filename = "nonstationary.png")
plot(psei_ts, main = "Monthly Closing Prices for the PSEi")
#dev.off()
psei
adf.test(psei_ts)
#png(filename="stationary.png")
psei_ts_ln = log(psei_ts)
psei_ts_ln_diff = diff(psei_ts_ln)
plot(psei_ts_ln_diff, main = "Stationary Time Series Plot after differencing and log transform")
#dev.off()
adf.test(psei_ts_ln_diff)
Box.test(psei_ts_ln_diff, type = "Ljung")
#png(filename="acf.png")
Acf(psei_ts_ln_diff, main = "ACF Correlogram") #MA(1)
#dev.off()
#png(filename="pacf.png")
Acf(psei_ts_ln_diff, type = "partial", main = "PACF Correlogram") #AR(1)
#dev.off()
arima(psei_ts_ln_diff, order = c(1,0,0))
arima(psei_ts_ln_diff, order = c(0,0,1))
arima(psei_ts_ln_diff, order = c(1,0,1))
fit = arima(psei_ts_ln_diff, order = c(1,0,0))
checkresiduals(fit)
residuals = fit$residuals
Acf(residuals)
Pacf(residuals)
psei_test_2 = ts(psei_test, start = c(1987, 2), frequency = 12)
model = Arima(psei_ts_ln_diff, order = c(1,0,0))
forecast_2yrs = predict(model, n.ahead = 24)$pred
final.ln.diff_2yrs = ts(c(psei_ts_ln_diff,forecast_2yrs), start = c(1987, 3), frequency = 12)
final.ln_2yrs = diffinv(final.ln.diff_2yrs, differences = 1, xi = psei_ts_ln[1])
final_2yrs = exp(final.ln_2yrs)
train = psei_ts
test = ts(psei_test_2[c(400:423)], start = c(2020,5), frequency = 12)
predicted = ts(final_2yrs[c(400:423)], start = c(2020,5), frequency = 12)
#png("forecast_2yrs.png")
plot(train, col = "blue", ylim = range(min(train, predicted), max(train, predicted)), main = "2-year forecast for the PSEi", xlab = "Year", ylab = "Price", xlim = c(1987, 2023), xaxt = "n")
lines(test, col = "#028A0F")
lines(predicted, col = "red")
legend("topleft", legend = c("Training Data", "Testing Data", "Forecasted Values"), col = c("blue", "#028A0F", "red"), lty = 1)
axis(1, at = seq(1987, 2026, by = 5), labels = seq(1987, 2026, by = 5))
# Close the PNG graphics device
#dev.off()
forecast_5yrs = predict(model, n.ahead = 60)$pred
final.ln.diff_5yrs = ts(c(psei_ts_ln_diff,forecast_5yrs), start = c(1987, 3), frequency = 12)
final.ln_5yrs = diffinv(final.ln.diff_5yrs, differences = 1, xi = psei_ts_ln[1])
final_5yrs = exp(final.ln_5yrs)
train = psei_ts
predicted = ts(final_5yrs[c(400:459)], start = c(2020,5), frequency = 12)
#png("forecast_5yrs.png")
plot(train, col = "blue", main = "5-year forecast for the PSEi", ylim = range(min(train, predicted), max(train, predicted)), xlab = "Year", ylab = "Price", xlim = c(1987, 2027), xaxt = "n")
lines(predicted, col = "red")
legend("topleft", legend = c("Training Data", "Forecasted Values"), col = c("blue", "red"), lty = 1)
axis(1, at = seq(1987, 2027, by = 5), labels = seq(1987, 2027, by = 5))
# Plot is saved as "forecast_plot.png"
# Close the PNG graphics device
#dev.off()
#Finding the MAPE
comparison = data.frame(
actual = test,
forecast = predicted
)
mean(abs((comparison$actual-comparison$forecast)/comparison$actual)) * 100
psei_test_2 = ts(psei_test, start = c(1987, 2), frequency = 12)
model = Arima(psei_ts_ln_diff, order = c(1,0,0))
forecast_2yrs = predict(model, n.ahead = 24)$pred
final.ln.diff_2yrs = ts(c(psei_ts_ln_diff,forecast_2yrs), start = c(1987, 3), frequency = 12)
final.ln_2yrs = diffinv(final.ln.diff_2yrs, differences = 1, xi = psei_ts_ln[1])
final_2yrs = exp(final.ln_2yrs)
train = psei_ts
test = ts(psei_test_2[c(400:423)], start = c(2020,5), frequency = 12)
predicted = ts(final_2yrs[c(400:423)], start = c(2020,5), frequency = 12)
#png("forecast_2yrs.png")
plot(train, col = "blue", ylim = range(min(train, predicted), max(train, predicted)), main = "2-year forecast for the PSEi", xlab = "Year", ylab = "Price", xlim = c(1987, 2023), xaxt = "n")
lines(test, col = "#028A0F")
lines(predicted, col = "red")
legend("topleft", legend = c("Training Data", "Testing Data", "Forecasted Values"), col = c("blue", "#028A0F", "red"), lty = 1)
axis(1, at = seq(1987, 2026, by = 5), labels = seq(1987, 2026, by = 5))
# Close the PNG graphics device
#dev.off()
#Finding the MAPE
comparison = data.frame(
actual = test,
forecast = predicted
)
comparison
mean(abs((comparison$actual-comparison$forecast)/comparison$actual)) * 100
sales = read.csv("PS1.csv")
sales
sales = read.csv("PS1.csv")
sales_ts = ts(sales)
sales = read.csv("PS1.csv")
sales_ts = ts(sales)
plot(sales_ts, main = "Sales of IG-11")
adf.test(sales_ts)
sales = read.csv("PS1.csv")
sales_ts = ts(sales)
# log transform the data
X_t = ln(sales_ts)
sales = read.csv("PS1.csv")
sales_ts = ts(sales)
# log transform the data
X_t = log(sales_ts)
plot(X_t, main = "Sales of IG-11")
adf.test(X_t)
# Difference the data
Y_t = diff(X_t)
plot(Y_t)
adf.test(Y_t)
Y_t2 = diff(Y_t)
plot(Y_t2)
adf.test(Y_t2)
Box.test(Y_t2, type = "Ljung")
acf(Y_t2)
acf(Y_t2, type = "partial")
arima(Y_t2, order = c(3,0,0))
arima(Y_t2, order = c(0,0,1))
arima(Y_t2, order = c(3,0,1))
plot(X_t, main = "Sales of IG-11 (Log Transform)")
library("TSA")
library("tseries")
library("lmtest")
library("tidyverse")
library("forecast")
library("quantmod")
library("ggplot2")
# Read the CSV data
BDO = read.csv("BDO_daily.csv")
#Sort data from oldest to newest
BDO = BDO[rev(rownames(BDO)), ]
BDO = tail(BDO, 500)
training_BDO = head(BDO, 470)
training_BDO
test_BDO = BDO
# training data
BDO = training_BDO["Close"]
BDO_TS = ts(BDO)
BDO_TS
plot(BDO_TS)
adf.test(BDO_TS)
BDO_TS_diff = diff(BDO_TS) # differencing
adf.test(BDO_TS_diff)
Box.test(BDO_TS_diff, type = "Ljung")
acf(BDO_TS_diff, main = "ACF") # Check MA(3)
acf(BDO_TS_diff, type="partial", main = "PACF") # Check AR(3), AR(4)
acf(Y_t2, main = "ACF Correlogram") # MA(1)
acf(Y_t2, type = "partial", main = "PACF Correlogram") # AR(3)
